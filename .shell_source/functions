highlightsudo='se|sq|sudo'
highlightcom='vim|ssh|chown|chmod|configure|ls|sed|grep|mc'
highlightgnu='cat|tac|nl|od|base32|base64|basenc|fmt|pr|fold|head|tail|split|csplit|wc|sum|uniq|comm|ptx|tsort|cut|paste|join|tr|expand|unexpand|ls|dir|vdir|dircolors|cp|dd|mv|rm|shred|link|ln|mkdir|mkfifo|mknod|readlink|rmdir|unlink|chown|chmod|chgrp|touch|df|du|stat|sync|truncate|echo|printf|test|expr|tee|basename|dirname|pathchk|mktemp|realpath|pwd|logname|whoami|id|groups|users|who|date|arch|nproc|uname|hostname|hostid|uptime|chcon|runcon|chroot|env|nice|nohup|stdbuf|timeout|kill|pkill|sleep|factor|numfmt|seq|source'

##### --histrory search START-- ######

## example search with tag :
# $user: vim /etc/apt/source.list #tag-vim_source-list
# $user: hi vim
# install colorex or delete string the end
hhgrepv='(grep.*|hi|hh|hhall|history|hhistory|hhuniq|plz|sr|hhnumuniq|hhlastuniq-grep|hhlastuniq|hhistory-uniq) '
hhgrepvfirst='^(hi|hh|hhall|history|hhistory|hhuniq|plz|sr|hhnumuniq|grep|hhlastuniq-grep|hhlastuniq|hhistory-uniq)'
hhlocalgrepv='^(hi|hh|hhall|history|hhistory|hhuniq|plz|sr|hhnumuniq|hhlastuniq-grep|hhlastuniq|hhisrtory-uniq)' 

#search for tag-
hi() {
    if [ -n "$(which colorex 2> /dev/null)" ] 
        then history |grep --color=always "tag-$@" |grep -wvE "${hhgrepv}" |tail -n60 |colorex -B '^....[0-9] |sed -E "s/$/\n/g"'
        else history |grep --color=always "tag-$@" |grep -wvE "${hhgrepv}" |tail -n60 |grep '^....[0-9]'
    fi    
}

# search for all history and show 50 last
hh() {
    if [ -n "$(which colorex 2> /dev/null)" ] 
        then history |grep --color=always -i "$@" |grep -wvE "${hhgrepv}" |tail -n60 |colorex -B '^....[0-9]'
        else history |grep --color=always -i "$@" |grep -wvE "${hhgrepv}" |tail -n60 |grep '^....[0-9]'
    fi    
}

# search all history to master word
hhall() {
    if [ -n "$(which colorex 2> /dev/null)" ]
        then history |grep --color=always -i "$@" |grep -wvE "${hhgrepv}" |colorex -B '^....[0-9]'
        else history |grep --color=always -i "$@" |grep -wvE "${hhgrepv}" |grep '^....[0-9]'
    fi    
}

# search all history and highlight special command
hhistory() {
    if [ -n "$(which colorex 2> /dev/null)" ]; then 
        history |grep -wvE "${hhgrepv}" |colorex -B '^....[0-9]' |colorex -c ":[0-9][0-9] (${highlightgnu})" |colorex -y ":[0-9][0-9] (${highlightcom})" |colorex -B ":[0-9][0-9] (${highlightsudo}).*" |colorex -r '\|' |colorex -D '\|' |colorex -g '\/' |colorex -M '\\'
    else history |grep --color=always -wvE "${hhgrepv}" |grep '^....[0-9]' 
    fi
}

# serach uniq word
hhuniq() {
    if [ -n "$(which colorex 2> /dev/null)" ]; then 
        history |grep --color=always -i "$@" |awk "{\$1=\$2=\$3\"\"; print \$0}" |sed -E 's/^\s{8}//g' |sed 's/^\(\([0-9]\{2\}:\)\{2\}[0-9]\{2\}\s\)\{3\}//g' |grep -vE "${hhgrepvfirst}"|awk "!a[\$0]++" |colorex -c "^(${highlightgnu})" |colorex -y "^(${highlightcom})" |colorex -Y "^(${highlightsudo}).*" |colorex -r '\|' |colorex -D '\|' |colorex -g '\/' |colorex -M '\\'
    else
        history |grep --color=always -i "$@" |awk "{\$1=\$2=\$3\"\"; print \$0}" |sed -E 's/^\s{8}//g' |sed 's/^\(\([0-9]\{2\}:\)\{2\}[0-9]\{2\}\s\)\{3\}//g' |grep -vE "${hhgrepvfirst}"|awk "!a[\$0]++"
    fi
}    

# search last uniq word from your past line numbers
# Example: hhlastuniq 50
hhlastuniq() {
    if [ -n "$(which colorex 2> /dev/null)" ]; then 
        history |tail -n "$1" |awk "{\$1=\$2=\$3\"\"; print \$0}" |sed -E 's/^\s{8}//g' |sed 's/^\(\([0-9]\{2\}:\)\{2\}[0-9]\{2\}\s\)\{3\}//g' |grep -vE "${hhgrepvfirst}" |awk "!a[\$0]++" |colorex -c "^(${highlightgnu})" |colorex -y "^(${highlightcom})" |colorex -Y "^(${highlightsudo}).*" |colorex -r '\|' |colorex -D '\|' |colorex -g '\/' |colorex -M '\\'
    else
        history |tail -n "$1" |awk "{\$1=\$2=\$3\"\"; print \$0}" |sed -E 's/^\s{8}//g' |sed 's/^\(\([0-9]\{2\}:\)\{2\}[0-9]\{2\}\s\)\{3\}//g' |grep -vE "${hhgrepvfirst}" |awk "!a[\$0]++"
    fi
}

#C- use hhlastuniq-grep <50>
hhlastuniq-grep() {
    if [ -n "$(which colorex 2> /dev/null)" ]; then
        history |tail -n "$1" |awk "{\$1=\$2=\$3\"\"; print \$0}" |sed -E 's/^\s{8}//g' |sed 's/^\(\([0-9]\{2\}:\)\{2\}[0-9]\{2\}\s\)\{3\}//g' |grep -vE "${hhlocalgrepv}"  |awk "!a[\$0]++" |colorex -c "^(${highlightgnu})" |colorex -y "^(${highlightcom})" |colorex -Y "^(${highlightsudo}).*" |colorex -r '\|' |colorex -D '\|' |colorex -g '\/' |colorex -M '\\'
    else
        history |tail -n "$1" |awk "{\$1=\$2=\$3\"\"; print \$0}" |sed -E 's/^\s{8}//g' |sed 's/^\(\([0-9]\{2\}:\)\{2\}[0-9]\{2\}\s\)\{3\}//g' |grep -vE "${hhlocalgrepv}" |awk "!a[\$0]++"
    fi
}

# serach uniq word and nummber command
# search better thought first word in commnad
# 	example : hhnumuniq bash
# 	output - 1847  2019-08-28 18:35:53 bash /var/www/vtigercrm-SPAsteriskConnector/bin/start.sh

hhnumuniq() {
    declare -A unnumber
    local len="$(hhuniq "$@" |wc -l)"
    local criterion="$(history | grep --color=none -i "$@" |grep --color=none -wv "${hhgrepv}" |awk "{\$1=\$2=\$3\"\"; print \$0}" |sed -E 's/^\s{8}//g' |sed 's/^\(\([0-9]\{2\}:\)\{2\}[0-9]\{2\}\s\)\{3\}//g' |awk "!a[\$0]++")"    
    local listprevent="$(history | grep --color=always -i "$@" |grep -wv "${hhgrepv}" |sed -E 's/^\s{4}//g' |awk "!a[\$0]++")"

    for i in $(seq $len); do
        local str=$(echo "$criterion" |sed "$i!d")
        local idx="$i"
        unnumber["$idx"]="${str:0}"
        local idnumber="${unnumber[$idx]}"
        local change="$(echo "$idnumber" |awk -v sec="$1.*" '{ $1="";  print sec$0; }')"
        echo -e "$listprevent" |/usr/bin/grep "${change}" |tail -n1
    done
}

hhistory-uniq() {
    if [ -n "$(which colorex 2> /dev/null)" ]; then 
        history |awk "{\$1=\$2=\$3\"\"; print \$0}" |sed -E 's/^\s{8}//g' |sed 's/^\(\([0-9]\{2\}:\)\{2\}[0-9]\{2\}\s\)\{3\}//g' |grep -vE "${hhlocalgrepv}"  |awk "!a[\$0]++" |colorex -c "^(${highlightgnu})" |colorex -y "^(${highlightcom})" |colorex -Y "^(${highlightsudo}).*" |colorex -r '\|' |colorex -D '\|' |colorex -g '\/' |colorex -M '\\'
    else 
        history |awk "{\$1=\$2=\$3\"\"; print \$0}" |sed -E 's/^\s{8}//g' |sed 's/^\(\([0-9]\{2\}:\)\{2\}[0-9]\{2\}\s\)\{3\}//g' |grep -vE "${hhlocalgrepv}" |awk "!a[\$0]++"
    fi
}

##### --histrory search END-- #####

incognito() {
  case $1 in
    start)
    set +o history;;
    stop)
    set -o history;;
    *)
    echo -e "USAGE: incognito start - disable command history.
       incognito stop  - enable command history.";;
  esac
}

extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.tar.xz)   tar -xpJf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       rar x $1       ;;
          *.gz)        gunzip $1      ;;
          *.xz)        unxz $1        ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

defcat() {
    if [ -x /bin/cat ]; then
        /bin/cat "$@"
    else /usr/bin/cat "$@"
    fi
}

# remove unprintable characters for output utilit "script"
# use - scriptformat input_file output_file
scriptformat() {
	local defaultcat=$(which cat |grep 'cat' |grep -v '^alias' )
	${defaultcat} $1 | perl -pe 's/\e([^\[\]]|\[.*?[a-zA-Z]|\].*?\a)//g' | col -bp > $2
}

#C- color highlight output
gulimit() { ulimit "$@" |grcat conf.ulimit ; }
gconfigure() { configure "$@" |grcat conf.configure; }
se() { /usr/bin/sudo HOME=$HOME "$@"; }
mmake() { /usr/bin/make "$@" |colorex -c '(?i)making all.*' -y '(?i)making install.*' -R '(?i)error.*' -M '(?i)warning.*'; }
cconfigure() { ./configure "$@" |colorex -c ' not found' -g ' found' -c ' no' -g ' yes' -R '(?i)error`' -M '(?i)warning' -Y ' (?i)no support'; }
ccolorex() { /usr/bin/colorex "$@" -R '(?i)err' -M '(?i)warn'; -g '(?i)done' -r '(?i)failed'; }

#C- create archive
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }   # Creates an archive (*.tar.gz) from given directory
function makezip() { zip -r "${1%%/}.zip" "$1" ; }              # Create a ZIP archive of a file or folder.

#C- use - cht /ls/
cht() { /usr/bin/curl cheat.sh/"$@"; }

#C- systemd status
sys-start() { sudo bash -c "sudo systemctl start $*"; sudo systemctl status $* --full --no-pager; }
sys-stop() { sudo bash -c "systemctl stop $*"; sudo systemctl status $* --full --no-pager; }
sys-reload() { sudo bash -c "systemctl reload $*"; sudo systemctl status $* --full --no-pager; }
sys-restart() { sudo bash -c "systemctl restart $*" && sleep 1 && sudo systemctl status $* --full --no-pager; }
sys-stat() { sudo bash -c "systemctl status $* --full --no-pager"; }
sys-cat() { sudo bash -c "systemctl cat $* --full --no-pager"; }
sys-edit() { sudo bash -c "sudo EDITOR=vim systemctl edit $*"; }
sys-enable() { sudo bash -c "systemctl enable $*"; }
sys-disable() { sudo bash -c "systemctl disable $*"; }
sys-daemon() { sudo bash -c "systemctl daemon-reload"; }
sysstopstart() { 
	sudo bash -c "systemctl stop $*" && sleep 1 && 
	sudo systemctl start $* && sleep 1 && 
	sudo systemctl status $* --full --no-pager
}

#C- check used memory/or..
check_mem_humanreadable() { ps aux | awk '{print $6/1024 " MB\t\t" $11}' | sort -n |tail |column -t; }
check_mem_procent() { ps -e -o pid,user,%mem,command --sort %mem; }
check_mem() { ps -e -o pid,vsz,comm= | sort -n -k 2; }
check_swap() {
    for dir in $(find /proc/ -maxdepth 1 -type d |grep -E "[0-9]+"); do 
        local pid=$(echo $dir |cut -d/ -f3)
        local cmd=$(ps h -o comm -p $pid)
        local swap=$(grep VmSwap ${dir}/status 2> /dev/null |awk '{print int($2/1024)}')
        if [ ! -z $swap ] && [ $swap -ne 0 ]; then
            echo "pid: $pid command: $cmd swap: $swap MB"
        fi
    done |sort -rnk6 |column -t
}

vime() { xargs sh -c 'vim "$@" < /dev/tty' example; } ## or use "xarg -o vim", #example - any word

ports() {
    local check_netstat=$(type netstat)

    if $(sudo -v); then
        if [ -n "$check_netstat" ]
            then sudo netstat -tulpn |sort -t: -k2 -n
            else sudo ss -tulpn |sort -t: -k2 -n
        fi
    else
        if [ -n "$check_netstat" ]
            then netstat -tulpn |sort -t: -k2 -n
            else ss -tulpn |sort -t: -k2 -n
        fi
    fi
}

allcrontab() {
    local red='\e[0;31m'
    local RED='\e[1;31m'
    local green='\e[0;32m'
    local GREEN='\e[1;32m'
    local PURPLE='\e[1;35m'
    local YELLOW='\e[22;33m'
    local NC='\e[0m'
        
    local cron_dir="$(find /etc -type d -name "*cron*" 2> /dev/null)" 

    for dir in $cron_dir; do
    	echo -e "----------------- ${PURPLE}START ${dir} -------------------- ${NC}\n"
        	for crond in $(ls -L1 $dir); do
                if $(sudo -v)
                    then crondtab=$(sudo sh -c "cat ${dir}/${crond} 2>/dev/null" |egrep -Ev "^\s*(;|#|$)")
                    else crondtab=$(cat "${dir}/${crond}" 2>/dev/null |egrep -Ev "^\s*(;|#|$)")
                fi
    
                if [ -n "${crondtab}" ]; then
                    echo -e "${RED}====== Start ${dir}/ ${NC}${GREEN}${crond}${NC} ${RED}======${NC}"
                        echo "${crondtab}"
                    echo -e "${RED}====== End ${crond} ${NC}${GREEN}${crond}${NC} ${RED}======${NC}\n"
                fi
        	done
        echo -e "----------------- ${PURPLE}END ${dir} -------------------- ${NC}\n"
    done
    	
    echo -e "----------------- ${PURPLE}START /etc/crontab -------------------- ${NC}\n"
        cat /etc/crontab |egrep -Ev "^\s*(;|#|$)"
    echo -e "----------------- ${PURPLE}END /etc/crontab -------------------- ${NC}\n"
    
    echo -e "----------------- ${PURPLE}START users crontab -------------------- ${NC}\n"
        if $(sudo -v &> /dev/null); then
            for user in $(cut -d':' -f1 /etc/passwd); do
                local usercrontab=$(sudo sh -c "crontab -l -u ${user} 2>/dev/null")
    
                if [ -n "${usercrontab}" ]; then
                    echo -e "${RED}====== Start crontab for user ${NC}${GREEN}${user}${NC} ${RED}======${NC}"
                        sudo sh -c "crontab -l -u ${user}" |sed '/ *#/d; /^ *$/d'
                    echo -e "${RED}====== End crontab for user ${NC}${GREEN}${user}${NC} ${RED}========${NC}\n"
                fi    
            done
        else 
            echo -e "${YELLOW}====== Start crontab for user ${NC}${GREEN}${user}${NC} ${YELLOW}======${NC}"
                crontab -l |sed '/ *#/d; /^ *$/d'
            echo -e "${YELLOW}====== End crontab for user ${NC}${GREEN}${user}${NC} ${YELLOW}========${NC}\n"
        fi   
    echo -e "----------------- ${PURPLE}END users crontab -------------------- ${NC}\n"

}


checkSizeInDirWithIgnore() {
#C- example: checkSizeInDirWithIgnore var boot
#or	     checkSizeInDirWithIgnore 
    local params=''
    local with=false
    if [ "$1" = '--with-proc' ]
        then with=true
        else params="-I proc -I sys -I dev"
    fi

    if [ "$#" -lt 1 ]
        then params="$params -I mnt "
        elif [ "$#" -gt 1 ]; then

            if [ "$with" = true ]
                then item_no=2
                else item_no=1
            fi

            local count="$#"
            for ((i=$item_no; i <= $count; i++)); do
                param="${!i}"
                params="$params -I $param "
            done
        else params+=" -I $1"
    fi

    local list="$(ls -a $params |egrep -v '^(\.\.|\.)$')"
    if $(sudo -v); then
        echo -e "this directory - \033[1;36m $(pwd) \033[0m"
        sudo du -sh $list |sort -hr; else
        du -sh $list      |sort -hr
    fi
}

 
removeComments() {
#C- Used: removeComments /path/to/file '\;'
#or 	  removeComments /path/to/file
    local run=false
    local removed='#'
    local path="$1"

    if [ "$#" -lt 1 ]; then
       echo -e "Error: no arguments, must will be min - 1"
    elif [ "$#" -gt 2 ]; then
       echo -e "Error: too many arguments, must will be max - 2"
    else
        run=true

        if [ "$#" -eq 2 ]; then
            if [ "$2" != '' ];  then removed="$2"; fi
            if [ "$2" != ' ' ]; then removed="$2"; fi
        fi
    fi

    if [ "$run" = true ]; then
        if $(sudo -v); then
            sudo cat "$path" |egrep -v "^${removed}|^\s?+${removed}|^$" |sed "s/${removed}.*//g" |sed '/^$/d' |grep -v '^\s*$'
        else
            cat "$path" |egrep -v "^${removed}|^\s?+${removed}|^$" |sed "s/${removed}.*//g" |sed '/^$/d' |grep -v '^\s*$'
        fi
     fi
}

egreplessdir() {
#C- Example: egreplessdir  'struing' /path/to/dir '\string_exclude_comment' '--<param>'
#or 	     egreplessdir  'string pattern' /path/to/dir
    local run=false
    local comment='#'
    local path="$2"
    local pattern="$1"
    local param=''

    if [ "$#" -le 1 ]; then
       echo -e "Error: too few arguments, must will be min - 2"
    elif [ "$#" -gt 4 ]; then
       echo -e "Error: too many arguments, must will be max - 4"
    else
        run=true

        if [ "$#" -ge 3 ]; then
            if [ "$3" != '' ];  then comment="$3"; fi
            if [ "$3" != ' ' ]; then comment="$3"; fi
        fi

        if [ "$#" -eq 4 ]; then param="$4"; fi
    fi


    if [ "$run" = true ]; then
        if [ "$param" = '--binary' ]; then
            grep -o ".\{0,120\}${pattern}.\{0,120\}" -ir "$path" |egrep -v "^${comment}|^\s?+${comment}" \
                            |sed "s/\(:${comment}\).*/ -_CLEARED_by_filter_-/g" |grep -i "$pattern";    else
            grep -o ".\{0,120\}${pattern}.\{0,120\}" -iIr "$path" |egrep -v "^${comment}|^\s?+${comment}" \
                            |sed "s/\(:${comment}\).*/ -_CLEARED_by_filter_-/g" |grep -i "$pattern"
        fi
    fi
}

egrepless() {
#C- Example: egrepless  'struing' /path/to/file '\string_comment' '--<param>'
#or			 egrepless  'string pattern' /path/to/file
    local run=false
    local comment='#'
    local path="$2"
    local pattern="$1"
    local param=''

    if [ "$#" -le 1 ]; then
       echo -e "Error: too few arguments, must will be min - 2"
    elif [ "$#" -gt 4 ]; then
       echo -e "Error: too many arguments, must will be max - 4"
    else
        run=true

        if [ "$#" -ge 3 ]; then
            if [ "$3" != '' ];  then comment="$3"; fi
            if [ "$3" != ' ' ]; then comment="$3"; fi
        fi

        if [ "$#" -eq 4 ]; then param="$4"; fi
    fi


    if [ "$run" = true ]; then
        if [ "$param" == '--num' ]; then
            grep -o ".\{0,150\}${pattern}.\{0,150\}" -i "$path"  |egrep -v "^${comment}|^$\s?+${comment}" |grep -in "$pattern"; else
            grep -o ".\{0,150\}${pattern}.\{0,150\}" -i "$path"  |egrep -v "^${comment}|^$\s?+${comment}" \
                                |sed "s/\(:${comment}\).*/ -_CLEARED_by_filter_-/g" |grep -in "$pattern"
        fi
    fi
}


diffFiles() {
    diff --color --unified=0 $1 $2
}

showCountOpenFiles () {
#C- example: showCountOpenFiles apache2 ## or showCountOpenFiles 781 ## ppid=781
    if $(sudo -v); then
        local srv_app=$1

        if [ -n "$srv_app" ]; then input=1 ; else
            echo -e "\n \033[0;32m please enter service name or parent pid :\033[0m"
            if read -t 360 -sp "" input; then
                echo -e "you inputed \n $input\n"
                srv_app=$input
            fi
        fi

        local check_name="$(echo $srv_app |grep '^.*[A-Za-z].*')"
        local check_num="$(echo $srv_app |grep '^[0-9]*[0-9]$')"


        if [ -n "$check_name" ]; then
            local Ppid=$(ps -o ppid= -p "$(pidof $srv_app -s)" |tr -d ' ')
        fi

        if [ -n "$check_num" ]; then Ppid=$srv_app; fi

        #ppid != 1
        if [[ "$Ppid" != 1 &&  "$Ppid" != 0 && "$Ppid" =~ ^[0-9]+$ ]]; then

            local list_pid=$(sudo pstree -p "$Ppid" -n |awk -F '|-' '{print $2}' |cut -d '(' -f2 |tr -d '()+' |grep -v '^$')
            local f=$(sudo ls -l /proc/${Ppid}/fd |wc -l)
            echo "files opened in Parent pid ${Ppid} - $f"
            local sum=$(expr 0 + $f)

            for cpid in $list_pid; do
                f=$(sudo ls -l /proc/${cpid}/fd 2> /dev/null |wc -l)
                echo "files opened in child pid ${cpid} - $f"
                sum=$(expr $sum + $f)
            done

            echo -e "summarize files opened -\033[0;35m $sum \033[0m"

        else 
            echo -e "\033[1;31m Parent pid dont't be euqal 1/0 or content alphabic symbols;\033[0m ppid =$Ppid; you inputed - $srv_app"
        fi
    else  
        echo -e "\033[1;31m You don't have sudo priveleges"
    fi
}

rm() {
    if [[ "$*" == *"-rf"* ]]; then
        local all_arg="$@"
        echo "Do you really want to Totally/Fully delete/remove the directory/ies 'rm -rf'? (y/n)"
        read -t 60 -r answer

        if [ "$answer" = 'y' ]; then
            echo "A you shure 'rm' ${all_arg} ? (y/n)"
            read -t 60 -r finish_answer
            if [ "$finish_answer" = 'y' ]
                then /bin/rm -rf "$@"
                else echo "Cancel"
            fi
        else 
            echo "Cancel"
        fi
    else
        /bin/rm "$@"
    fi
}

function move_cursor_to_end_line () {
    local columns=$(tput cols)      #get length line
    local preend=$(( $columns - 8 ))
    echo "\033[${preend}G"
}

function show_new_files() {
#(%c)
    if [ -z "$1" ]; 
        then local minits=60
        else local minits=${1}
    fi        
   
    sudo find / -type d  \( -path '/proc' -o -path '/dev' -o -path '/sys' \
                        -o -path '/var/log/*' -o -path '/var/lib/docker/*' \
                        -o -path '/mnt' \
                    \) -prune \
                    -o -type f -cmin -${minits} \
                    -printf '%Td-%Tm-%TY %TH:%TM %s\t %p %m %u:%g [%i] \n' \
    |awk '{ $3 = "\t"substr(($3/1024), 1, 4) "k""\t"; $4=$4 "\t " ; print }' \
    |sort -k1.7,1.10r -k1.4,1.5r -k1.1,1.2r -k2.1r -k2.2r -k2.4r -k2.5r
}

myfunctions_aliases () {
    echo -e '
HIGHLIGHTS HISTORY SEARCH:
        hi                  - search with #tag-
        hh                  - search pattern
        hhall               - search all pattern
        hhistory            - search all and highlight
        hhuniq              - search all uniq pattern
        hhnumuniq           - search all uniq pattern with number
        hhlastuniq          - search tail uniq pattern
        hhlastuniq-grep     - search uniq include grep and set number tail
        hhistory-uniq       - searh hithlight uniq include grep
        history-uniq

SYSTEMD:
        sys-start
        sys-stop
        sys-reload
        sys-stat
        sys-cat
        sys-edit
        sys-enable
        sys-disable
        sysstopstart

PERMANCE CHECK:
        check_mem
        check_mem_humanreadable
        check_mem_procent
        check_swap
        allcrontab                  - show all crons

DISK SIZE CHECK:
        checkSizeInDirWithIgnore    - check size in cur dir with ignore
        used                        - check size in current dir
        showfatindir

NET CHECK:
        ports                       - show all ports listening
        ports4, ports6
        cmyip, ip_a

SEARCH:
        removeComments      - cat and remove comments
        egreplessdir        - grep -ir
        egrepless           - grep -i
        psaux, psu, psg
        dirtree, stripcomments

DOCKER:
        docker_all
        docker_ports-with_names
        docker_ports-with_id
        docker_names
        docker_status
        docker_images

SYNC:
       scpresume 

HIGHLIGHTS:
        gulimit             - highlight ulimit
        gconfigure          - highlight configure
        cconfigure          - highlight configure
        mmake               - highlight make
        ccolorex            - color error...
        diffFiles           - color diff
        err                 - grep -i error...

HIGHLIGHTS grc:
        blkid_g
        ...

GIT SHORCUTS:
        gs, gb, gbv, gp, ga, gl, gd, gdc, glf
        gr, gpo, gplo, gst

OTHER:
        incognito
        extract
        defcat              - /usr/bin/cat
        scriptformat        - remove ansci unprintable cahracters
        se                  - short sudo
        sq, plz, sr, l1
        maketar
        makezip
        cht                 - search in cheat.sh
        vime, svi                
        wdownload, lnn
        xsc, lnn
        lla, lss
        scrd, mounts, supdate
        sprunge, phpinfo_e
        speedt, speedt1, speeddown
        locru, locen, lessr

    '
}    










#C- ----------------------------------------------------comment --------------------------------------------------

### old hostory search 
# too so on over 1000 strings search
# hhnumuniq() {
#    declare -A number
#    declare -A unnumber
#    len=$(history | wc -l)
#    ((len=len-1))

#    for i in $(seq 1 $len); do
#        str=$(history | sed "$i!d")
#        idx="${str:0:5}"
#        idx=$(echo "${idx//[!0-9]/}")
#        number["$idx"]="${str:0}"
#        unnumber["$idx"]="${str:27}"
#    done
#    commandnum=''
#    for i in $(seq 1 $len); do
#        if [ number["$i"] = "dupe" ]; then
#            continue
#        fi
#        for j in $(seq 1 $len); do
#            if [ "${unnumber[$j]}" = "${unnumber[$i]}" ] && [ "$i" != "$j" ]; then
#                number["$j"]="dupe"
#            fi
#        done
#        commandnum=$(echo -e "$commandnum$\r\n${number[$i]}")
#    done
#    echo "$commandnum" |grep --color=always -i "$@" |grep -wv "${hhgrepv}" |grep -wv "grep.*" |colorex -B '^....[0-9]'
# }

# hhnumuniq() {
#	history | grep --color=always -i "$@" |grep -v "${hhgrepv}" |grep -wv "grep.*" |sed 's/^\s\s\s\s//g' |awk "!a[\$0]++" |tail -n5 |colorex -B '^....[0-9]'
# }




### Runs a ls immediately when you're inside a file. 
#cl() {
# if [ -d $1 ] ; then
#	cd $1
#	ls 
# else
#	echo "'$1' not a dir..."
# fi
#}
###
### transfer
#function transfer
#    if test (count $argv) -eq 0
#        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
#        return 1
#    end

#    ## get temporarily filename, output is written to this file show progress can be showed
#    set tmpfile ( mktemp -t transferXXX )

#    ## upload stdin or file
#    set file $argv[1]

#    #if tty -s;
#    #then
#        set basefile (basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')

    #    if [ ! -e $file ];
    #    then
    #        echo "File $file doesn't exists."
    #        return 1
    #    fi

#        if test -d $file
#           # zip directory and transfer
#            set zipfile ( mktemp -t transferXXX.zip )
#            # echo (dirname $file)
#            #cd (dirname $file) and echo (pwd)
#            zip -r -q - $file >> $zipfile
#            curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> $tmpfile
#            rm -f $zipfile
#        else
#            # transfer file
#            curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> $tmpfile
#        end
#    #else
#    #    # transfer pipe
#    #    curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> $tmpfile
#    #fi

#    ## cat output link
#    cat $tmpfile

#    ## cleanup
#    rm -f $tmpfile
#end
###

### allcolor
#function allcolors() {
#    # credit to http://askubuntu.com/a/279014
#    for x in 0 1 4 5 7 8; do
#        for i in `seq 30 37`; do
#            for a in `seq 40 47`; do
#                echo -ne "\e[$x;$i;$a""m\\\e[$x;$i;$a""m\e[0;37;40m "
#            done
#            echo
#        done
#    done
#    echo ""
#}
###

### term title
#function __makeTerminalTitle() {
#    local title=''
#
#    local CURRENT_DIR="${PWD/#$HOME/\~}"

#    if [ -n "${SSH_CONNECTION}" ]; then
#        title+="`hostname`:${CURRENT_DIR} [`whoami`@`hostname -f`]"
#    else
#        title+="${CURRENT_DIR} [`whoami`]"
#    fi

#    echo -en '\033]2;'${title}'\007'
#}
###

### list screen session
    # screen sessions
#    local SCREEN_PATHS="/var/run/screens/S-`whoami` /var/run/screen/S-`whoami` /var/run/uscreens/S-`whoami`"

#    for screen_path in ${SCREEN_PATHS}; do
#        if [ -d ${screen_path} ]; then
#            SCREEN_JOBS=`ls ${screen_path} | wc -w`
#            if [ ${SCREEN_JOBS} != 0 ]; then
#                local current_screen="$(echo ${STY} | cut -d '.' -f 1)"
#                if [ -n "${current_screen}" ]; then
#                    current_screen=":${current_screen}"
#                fi
#                PS1+=" \[${BGreen}\][s${SCREEN_JOBS}${current_screen}]\[${Color_Off}\]"
#            fi
#            break
#        fi
#    done
###

### git branch
#    if [ -x "`which git 2>&1`" ]; then
#        local branch="$(git name-rev --name-only HEAD 2>/dev/null)"

#        if [ -n "${branch}" ]; then
#            local git_status="$(git status --porcelain -b 2>/dev/null)"
#            local letters="$( echo "${git_status}" | grep --regexp=' \w ' | sed -e 's/^\s\?\(\w\)\s.*$/\1/' )"
#            local untracked="$( echo "${git_status}" | grep -F '?? ' | sed -e 's/^\?\(\?\)\s.*$/\1/' )"
#            local status_line="$( echo -e "${letters}\n${untracked}" | sort | uniq | tr -d '[:space:]' )"
#            PS1+=" \[${BBlue}\](${branch}"
#            if [ -n "${status_line}" ]; then
#                PS1+=" ${status_line}"
#            fi
#            PS1+=")\[${Color_Off}\]"
#        fi
#    fi
###

### SIZE
#function sanitize() { chmod -R u=rwX,g=rX,o= "$@" ;}                  # Make your directories and files access rights sane.
###
### UPDATE title bar
#update_title_bar () {
#  #--- Initialize the PROMPT_COMMAND and trap, if the first arg is "init".
#  [[ "${1}" == "init" ]] && {
#    [[ "${PROMPT_COMMAND}" != "" ]] && PROMPT_COMMAND+=";"
#    PROMPT_COMMAND+='update_title_bar 0 ${SHELL}'
#    trap 'update_title_bar ${0}' DEBUG
#  #--- Set some text replacment defaults.
#    [[ -z "${UTB_TEXT_REPLACE[*]}" ]] && {
#      UTB_TEXT_REPLACE=(
#        "${HOME}"   '~'
#      )
#    }
#  }
#  local BCMD="${BASH_COMMAND}"
#  #--- the trap command associated with this function passes ${0} as an argument.
#  # If this valye exists, we should be able to assume that we are running in a
#  # script (or during source'ing our bashrc file(s).
#  # The idea is to skip any scripted or source'd commands.
#  local IN_SCRIPT="${1}"
#  local MANUAL_CMD="${2}"
#  #--- Entering a second arg to this function overrides the output of the command name.
#  [[ "${MANUAL_CMD}" != "" ]] && BCMD="${MANUAL_CMD}"
#  local CMDRGX="${BCMD//\\/\\\\}"; CMDRGX="${CMDRGX//\//\\\/}"; CMDRGX="${CMDRGX//\$/\\\$}"
#  CMDRGX="${CMDRGX//\{/\\\{}"; CMDRGX="${CMDRGX//\}/\\\}}"
#  #--- Skip any commands that we've deemed to be "scripted".
#  [[ "${IN_SCRIPT}" == "IN" ]] && {
#    return
#  #--- Skip any commands that exist in PROMPT_COMMAND
#  # WARNING: Bear in mind that manually-entered commands that match are also ignored.
#  } || [[ ! "${PROMPT_COMMAND}" =~ ${CMDRGX} ]] && { 
#    #--- If BCMD is trying to set the terminal title, we don't do anything.
#    [[ ! "${BCMD}" =~ \\e\]0\; ]] && {
#      local OUT=
#      #--- Make the title more noticable, if running with root privileges.
#      [[ ${EUID} == 0 ]] && OUT+="(ROOT_USER) " || OUT+="${USER}@"
#      OUT+="${HOSTNAME}:"
#      OUT+="${PWD} "
#     OUT+="[${BCMD}]"
#      local R=
#      for ((E=0; E<${#UTB_TEXT_REPLACE[@]}; E+=2)); do
#        local R="${UTB_TEXT_REPLACE[$E]}"
#        local RGX="${R//\\/\\\\}"; RGX="${RGX//\//\\\/}"; RGX="${RGX//\$/\\\$}";
#        RGX="${RGX//\{/\\\{}"; RGX="${RGX//\}/\\\}}"
#        [[ "${OUT}" =~ ${RGX} ]] && {
#          OUT="${OUT//${RGX}/${UTB_TEXT_REPLACE[$((${E}+1))]}}"
#        }
#      done
#      echo -ne "\e]0;${OUT}\007"
#    }
#  }
#} # END _update_title_bar

##--- Some stuff needs to be initialized, for things to work correctly.
#update_title_bar init
###
