highlightsudo='se|sq|sudo'
highlightcom='vim|ssh|chown|chmod|configure|ls|sed|grep|mc'
highlightgnu='cat|tac|nl|od|base32|base64|basenc|fmt|pr|fold|head|tail|split|csplit|wc|sum|uniq|comm|ptx|tsort|cut|paste|join|tr|expand|unexpand|ls|dir|vdir|dircolors|cp|dd|mv|rm|shred|link|ln|mkdir|mkfifo|mknod|readlink|rmdir|unlink|chown|chmod|chgrp|touch|df|du|stat|sync|truncate|echo|printf|test|expr|tee|basename|dirname|pathchk|mktemp|realpath|pwd|logname|whoami|id|groups|users|who|date|arch|nproc|uname|hostname|hostid|uptime|chcon|runcon|chroot|env|nice|nohup|stdbuf|timeout|kill|pkill|sleep|factor|numfmt|seq|source'

##### --histrory search START-- ######

## example search with tag :
# $user: vim /etc/apt/source.list #tag-vim_source-list
# $user: hi vim
# install colorex or delete string the end
hhgrepv='"^grep.*\|^(\|hi\|hh\|hhall\|history\|hhistory\|hhuniq\|plz\|sr|hhnumniq)"'
hhlocalgrepv="^(hi\|hh\|hhall\|history\|hhistory\|hhuniq\|plz\|sr\|hhnumniq)"

#search for tag-
hi() {
    history | grep --color=always "tag-$@" |grep -v "${hhgrepv}" |grep -wv "grep.*" |tail -n50 |colorex -B '^....[0-9]'
}

# search for all history and show 50 last
hh() {
    history | grep --color=always -i "$@" |grep -v "${hhgrepv}" |grep -wv "grep.*" |tail -n50 |colorex -B '^....[0-9]'
}

# search all history to master word
hhall() {
    history | grep --color=always -i "$@" |grep -v "${hhgrepv}" |grep -wv "grep.*" |colorex -B '^....[0-9]'
}

# search all history and highlight special command
hhistory() {
    history |grep -v "${hhgrepv}" |grep -wv "grep.*" |colorex -B '^....[0-9]' |colorex -c ":[0-9][0-9] (${highlightgnu})" |colorex -y ":[0-9][0-9] (${highlightcom})" |colorex -Y ":[0-9][0-9] (${highlightsudo}).*" |colorex -r '\|' |colorex -D '\|'
}

# serach uniq word
hhuniq() {
    history | grep --color=always -i "$@" |grep -v "${hhgrepv}" |grep -wv "grep.*" |awk "{\$1=\$2=\$3\"\"; print \$0}" |sed 's/^\s\s\s\s\s\s\s\s//g' |sed 's/^\(\([0-9]\{2\}:\)\{2\}[0-9]\{2\}\s\)\{3\}//g' |awk "!a[\$0]++"
}    

# search last uniq word from your past line numbers
hhlastuniq() {
    history |tail -n "$1" |grep -v "${hhgrepv}" |grep -wv "grep.*" |awk "{\$1=\$2=\$3\"\"; print \$0}" |sed 's/^\s\s\s\s\s\s\s\s//g' |sed 's/^\(\([0-9]\{2\}:\)\{2\}[0-9]\{2\}\s\)\{3\}//g' |awk "!a[\$0]++" |colorex -c "^(${highlightgnu})" |colorex -y "^(${highlightcom})" |colorex -Y "^(${highlightsudo}).*" |colorex -r '\|' |colorex -D '\|'
}

#C- use hhlastuniq-grep <50>
hhlastuniq-grep() {
    history |tail -n "$1" |grep -v "${hhlocalgrepv}" |awk "{\$1=\$2=\$3\"\"; print \$0}" |sed 's/^\s\s\s\s\s\s\s\s//g' |sed 's/^\(\([0-9]\{2\}:\)\{2\}[0-9]\{2\}\s\)\{3\}//g' |awk "!a[\$0]++" |colorex -c "^(${highlightgnu})" |colorex -y "^(${highlightcom})" |colorex -Y "^(${highlightsudo}).*" |colorex -r '\|' |colorex -D '\|'
}

# serach uniq word and nummber command
# search better thought first word in commnad
# 	example : hhnumuniq bash
# 	output - 1847  2019-08-28 18:35:53 bash /var/www/vtigercrm-SPAsteriskConnector/bin/start.sh

hhnumniq() {
    declare -A unnumber
    len="$(hhuniq "$@" |wc -l)"
    criterion="$(history | grep --color=none -i "$@" |grep --color=none -v "${hhgrepv}" |grep --color=none -wv "grep.*" |awk "{\$1=\$2=\$3\"\"; print \$0}" |sed 's/^\s\s\s\s\s\s\s\s//g' |sed 's/^\(\([0-9]\{2\}:\)\{2\}[0-9]\{2\}\s\)\{3\}//g' |awk "!a[\$0]++")"
    listprevent="$(history | grep --color=always -i "$@" |grep -v "${hhgrepv}" |grep -wv "grep.*" |sed 's/^\s\s\s\s//g' |awk "!a[\$0]++")"

    for i in $(seq $len); do
    str=$(echo "$criterion" |sed "$i!d")
    idx="$i"
    unnumber["$idx"]="${str:0}"
    idnumber="${unnumber[$idx]}"
    change="$(echo "$idnumber" |awk -v sec="$1.*" '{ $1="";  print sec$0; }')"
    echo -e "$listprevent" |grep "${change}" |tail -n1
    done
}

##### --histrory search END-- #####

incognito() {
  case $1 in
    start)
    set +o history;;
    stop)
    set -o history;;
    *)
    echo -e "USAGE: incognito start - disable command history.
       incognito stop  - enable command history.";;
  esac
}

extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.tar.xz)   tar -xpJf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       rar x $1       ;;
          *.gz)        gunzip $1      ;;
          *.xz)        unxz $1        ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

defcat() {
    if [ -x /bin/cat ]; then
        /bin/cat "$@"
    else /usr/bin/cat "$@"
    fi
}

# remove unprintable characters for output utilit "script"
# use - scriptformat input_file output_file
scriptformat() {
	defaultcat=$(which cat)
	${defaultcat} $1 | perl -pe 's/\e([^\[\]]|\[.*?[a-zA-Z]|\].*?\a)//g' | col -bp > $2
}

#C- color highlight output
gulimit() { ulimit "$@" |grcat conf.ulimit ; }
gconfigure() { configure "$@" |grcat conf.configure; }
se() { /usr/bin/sudo HOME=$HOME "$@"; }
mmake() { /usr/bin/make "$@" |colorex -c '(?i)making all.*' -y '(?i)making install.*' -R '(?i)error.*' -M '(?i)warning.*'; }
cconfigure() { ./configure "$@" |colorex -c ' not found' -g ' found' -c ' no' -g ' yes' -R '(?i)error`' -M '(?i)warning' -Y ' (?i)no support'; }
ccolorex() { /usr/bin/colorex "$@" -R '(?i)err' -M '(?i)warn'; -g '(?i)done' -r '(?i)failed'; }

#C- create archive
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }         # Creates an archive (*.tar.gz) from given directory
function makezip() { zip -r "${1%%/}.zip" "$1" ; }                    # Create a ZIP archive of a file or folder.

#C- use - cht /ls/
cht() { /usr/bin/curl cheat.sh/"$@"; }

#C- systemd status
sys-start() { sudo bash -c "sudo systemctl start $*"; sudo systemctl status $*; }
sys-stop() { sudo bash -c "systemctl stop $*"; sudo systemctl status $*; }
sys-reload() { sudo bash -c "systemctl reload $*"; sudo systemctl status $*; }
sys-restart() { sudo bash -c "systemctl restart $*"; sudo systemctl status $*; }
sys-stat() { sudo bash -c "systemctl status $*"; }
sysstopstart() { sudo bash -c "sudo systemctl stop $*" && sudo systemctl start $*; sudo systemctl status $*; }

#C- check used memory/or..
check_mem_humanreadable() { ps aux | awk '{print $6/1024 " MB\t\t" $11}' | sort -n |tail |column -t; }
check_mem_procent() { ps -e -o pid,user,%mem,command --sort %mem; }
check_mem() { ps -e -o pid,vsz,comm= | sort -n -k 2; }
check_swap() {
    for dir in $(find /proc/ -maxdepth 1 -type d |grep -E "[0-9]+"); do 
        pid=$(echo $dir |cut -d/ -f3)
        cmd=$(ps h -o comm -p $pid)
        swap=$(grep VmSwap $dir/status 2> /dev/null |awk '{print int($2/1024)}')
        if [ ! -z $swap ] && [ $swap -ne 0 ]; then
            echo "pid: $pid command: $cmd swap: $swap MB"
        fi
    done |sort -rnk6 |column -t
}

vime() { xargs sh -c 'vim "$@" < /dev/tty' example; } ## or use "xarg -o vim", #example - any word

allcrontab() {
    red='\e[0;31m'
    RED='\e[1;31m'
    green='\e[0;32m'
    GREEN='\e[1;32m'
    PURPLE='\e[1;35m'
    NC='\e[0m'

    for user in $(cut -d':' -f1 /etc/passwd); do
    	#C - <crontab -l> get data in /var/spool/cron/crontabs/*
        usercrontab=$(crontab -l -u ${user} 2>/dev/null)
        if [ -n "${usercrontab}" ]; then
            echo -e "${RED}====== Start crontab for user ${NC}${GREEN}${user}${NC} ${RED}======${NC}"
            crontab -l -u ${user} | sed '/ *#/d; /^ *$/d'
            echo -e "${RED}====== End crontab for user ${NC}${GREEN}${user}${NC} ${RED}========${NC}\n"
        fi
    done
    cron_dir="$(find /etc -type d -name "*cron*" 2> /dev/null)" 
    for dir in $cron_dir; do
    	echo -e "----------------- ${PURPLE}Start ${dir} -------------------- ${NC}\n"
    	for crond in $(ls -L1 $dir); do
            crondtab=$(cat "${dir}/${crond}" 2>/dev/null | egrep -Ev "^\s*(;|#|$)")
            if [ -n "${crondtab}" ]; then
                echo -e "${RED}====== Start ${dir}/ ${NC}${GREEN}${crond}${NC} ${RED}======${NC}"
                echo "${crondtab}"
                echo -e "${RED}====== End ${cond} ${NC}${GREEN}${crond}${NC} ${RED}======${NC}\n"
            fi
    	done
        echo -e "----------------- ${PURPLE}End ${dir} -------------------- ${NC}\n"
    done

}

checkSizeInDirWithIgnore() {
    				# example checkSizeInDirWithIgnore var boot
    #check that args != 0		
    if [ "$#" -lt 1 ]; then
        params="-I proc -I sys -I dev";
    elif [ "$#" -gt 1 ]; then
        $count = "$#";
        params=""
        for i in ${count}; do
           params+="-I $i ";
        done
    else
        params="-I $1";
    fi

    list="$(ls -a $params |egrep -v '^(..|.)$')"
    
    if $(sudo -v); then
        sudo du -sh $list | sort -hr; else
        du -sh $list | sort -hr
    fi 
}
 
removeComments() {
#C- Used: removeComments /path/to/file '\;'
#C- removeComments /path/to/file
    run=false
    removed='#'
    path="$1"

    if [ "$#" -eq 2 ]; then
       removed="$2"
        run=true
    elif [ "$#" -lt 1 ]; then
       echo -e "Error: no arguments, must will be min - 1"
    elif [ "$#" -gt 2 ]; then
       echo -e "Error: too many arguments, must will be max - 2"
    else
       run=true
    fi

    if [ "$run" = true ]; then
        if $(sudo -v); then
            sudo cat "$path" |egrep -v "^${removed}|^  ${removed}|^    ${removed}|^        ${removed}|^$" |sed "s/${removed}.*//g" |sed '/^$/d' |grep -v '^\s*$'
        else
            cat "$path" |egrep -v "^${removed}|^  ${removed}|^    ${removed}|^        ${removed}|^$" |sed "s/${removed}.*//g" |sed '/^$/d' |grep -v '^\s*$'
        fi
     fi
}

egreplessdir() {
#C- Example: egreplessdir  'struing' /path/to/dir '\string exclude comment'
#C- egreplessdir  'string pattern' /path/to/dir
    run=false
    comment='#'
    path="$2"
    pattern="$1"

    if [ "$#" -eq 3 ]; then
        comment="$3"
        run=true
    elif [ "$#" -le 1 ]; then
       echo -e "Error: too few arguments, must will be min - 2"
    elif [ "$#" -gt 3 ]; then
       echo -e "Error: too many arguments, must will be max - 3"
    else
        run=true
    fi

    if [ "$run" = true ]; then
        grep -o ".\{0,150\}${pattern}.\{0,150\}" -ir "$path"  |egrep -v "^${comment}|^  ${comment}|^    ${comment}|^       ${comment}" |grep -i "$pattern"
    fi
}

egrepless() {
#C- Example: egrepless  'struing' /path/to/file '\string comment'
#C- egrepless  'string pattern' /path/to/file
    run=false
    comment='#'
    path="$2"
    pattern="$1"

    if [ "$#" -eq 3 ]; then
        comment="$3"
        run=true
    elif [ "$#" -le 1 ]; then
       echo -e "Error: too few arguments, must will be min - 2"
    elif [ "$#" -gt 3 ]; then
       echo -e "Error: too many arguments, must will be max - 3"
    else
        run=true
    fi

    if [ "$run" = true ]; then
        grep -o ".\{0,150\}${pattern}.\{0,150\}" -i "$path"  |egrep -v "^${comment}|^  ${comment}|^    ${comment}|^       ${comment}" |grep -i "$pattern"
    fi
}

diffFiles() {
    diff --color --unified=0 $1 $2
}













#C- ----------------------------------------------------comment --------------------------------------------------

### old hostory search 
# too so on over 1000 strings search
# hhnumuniq() {
#    declare -A number
#    declare -A unnumber
#    len=$(history | wc -l)
#    ((len=len-1))

#    for i in $(seq 1 $len); do
#        str=$(history | sed "$i!d")
#        idx="${str:0:5}"
#        idx=$(echo "${idx//[!0-9]/}")
#        number["$idx"]="${str:0}"
#        unnumber["$idx"]="${str:27}"
#    done
#    commandnum=''
#    for i in $(seq 1 $len); do
#        if [ number["$i"] = "dupe" ]; then
#            continue
#        fi
#        for j in $(seq 1 $len); do
#            if [ "${unnumber[$j]}" = "${unnumber[$i]}" ] && [ "$i" != "$j" ]; then
#                number["$j"]="dupe"
#            fi
#        done
#        commandnum=$(echo -e "$commandnum$\r\n${number[$i]}")
#    done
#    echo "$commandnum" |grep --color=always -i "$@" |grep -wv "${hhgrepv}" |grep -wv "grep.*" |colorex -B '^....[0-9]'
# }

# hhnumuniq() {
#	history | grep --color=always -i "$@" |grep -v "${hhgrepv}" |grep -wv "grep.*" |sed 's/^\s\s\s\s//g' |awk "!a[\$0]++" |tail -n5 |colorex -B '^....[0-9]'
# }




### Runs a ls immediately when you're inside a file. 
#cl() {
# if [ -d $1 ] ; then
#	cd $1
#	ls 
# else
#	echo "'$1' not a dir..."
# fi
#}
###
### transfer
#function transfer
#    if test (count $argv) -eq 0
#        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
#        return 1
#    end

#    ## get temporarily filename, output is written to this file show progress can be showed
#    set tmpfile ( mktemp -t transferXXX )

#    ## upload stdin or file
#    set file $argv[1]

#    #if tty -s;
#    #then
#        set basefile (basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')

    #    if [ ! -e $file ];
    #    then
    #        echo "File $file doesn't exists."
    #        return 1
    #    fi

#        if test -d $file
#           # zip directory and transfer
#            set zipfile ( mktemp -t transferXXX.zip )
#            # echo (dirname $file)
#            #cd (dirname $file) and echo (pwd)
#            zip -r -q - $file >> $zipfile
#            curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> $tmpfile
#            rm -f $zipfile
#        else
#            # transfer file
#            curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> $tmpfile
#        end
#    #else
#    #    # transfer pipe
#    #    curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> $tmpfile
#    #fi

#    ## cat output link
#    cat $tmpfile

#    ## cleanup
#    rm -f $tmpfile
#end
###

### allcolor
#function allcolors() {
#    # credit to http://askubuntu.com/a/279014
#    for x in 0 1 4 5 7 8; do
#        for i in `seq 30 37`; do
#            for a in `seq 40 47`; do
#                echo -ne "\e[$x;$i;$a""m\\\e[$x;$i;$a""m\e[0;37;40m "
#            done
#            echo
#        done
#    done
#    echo ""
#}
###

### term title
#function __makeTerminalTitle() {
#    local title=''
#
#    local CURRENT_DIR="${PWD/#$HOME/\~}"

#    if [ -n "${SSH_CONNECTION}" ]; then
#        title+="`hostname`:${CURRENT_DIR} [`whoami`@`hostname -f`]"
#    else
#        title+="${CURRENT_DIR} [`whoami`]"
#    fi

#    echo -en '\033]2;'${title}'\007'
#}
###

### list screen session
    # screen sessions
#    local SCREEN_PATHS="/var/run/screens/S-`whoami` /var/run/screen/S-`whoami` /var/run/uscreens/S-`whoami`"

#    for screen_path in ${SCREEN_PATHS}; do
#        if [ -d ${screen_path} ]; then
#            SCREEN_JOBS=`ls ${screen_path} | wc -w`
#            if [ ${SCREEN_JOBS} != 0 ]; then
#                local current_screen="$(echo ${STY} | cut -d '.' -f 1)"
#                if [ -n "${current_screen}" ]; then
#                    current_screen=":${current_screen}"
#                fi
#                PS1+=" \[${BGreen}\][s${SCREEN_JOBS}${current_screen}]\[${Color_Off}\]"
#            fi
#            break
#        fi
#    done
###

### git branch
#    if [ -x "`which git 2>&1`" ]; then
#        local branch="$(git name-rev --name-only HEAD 2>/dev/null)"

#        if [ -n "${branch}" ]; then
#            local git_status="$(git status --porcelain -b 2>/dev/null)"
#            local letters="$( echo "${git_status}" | grep --regexp=' \w ' | sed -e 's/^\s\?\(\w\)\s.*$/\1/' )"
#            local untracked="$( echo "${git_status}" | grep -F '?? ' | sed -e 's/^\?\(\?\)\s.*$/\1/' )"
#            local status_line="$( echo -e "${letters}\n${untracked}" | sort | uniq | tr -d '[:space:]' )"
#            PS1+=" \[${BBlue}\](${branch}"
#            if [ -n "${status_line}" ]; then
#                PS1+=" ${status_line}"
#            fi
#            PS1+=")\[${Color_Off}\]"
#        fi
#    fi
###

### SIZE
#function sanitize() { chmod -R u=rwX,g=rX,o= "$@" ;}                  # Make your directories and files access rights sane.
###
### UPDATE title bar
#update_title_bar () {
#  #--- Initialize the PROMPT_COMMAND and trap, if the first arg is "init".
#  [[ "${1}" == "init" ]] && {
#    [[ "${PROMPT_COMMAND}" != "" ]] && PROMPT_COMMAND+=";"
#    PROMPT_COMMAND+='update_title_bar 0 ${SHELL}'
#    trap 'update_title_bar ${0}' DEBUG
#  #--- Set some text replacment defaults.
#    [[ -z "${UTB_TEXT_REPLACE[*]}" ]] && {
#      UTB_TEXT_REPLACE=(
#        "${HOME}"   '~'
#      )
#    }
#  }
#  local BCMD="${BASH_COMMAND}"
#  #--- the trap command associated with this function passes ${0} as an argument.
#  # If this valye exists, we should be able to assume that we are running in a
#  # script (or during source'ing our bashrc file(s).
#  # The idea is to skip any scripted or source'd commands.
#  local IN_SCRIPT="${1}"
#  local MANUAL_CMD="${2}"
#  #--- Entering a second arg to this function overrides the output of the command name.
#  [[ "${MANUAL_CMD}" != "" ]] && BCMD="${MANUAL_CMD}"
#  local CMDRGX="${BCMD//\\/\\\\}"; CMDRGX="${CMDRGX//\//\\\/}"; CMDRGX="${CMDRGX//\$/\\\$}"
#  CMDRGX="${CMDRGX//\{/\\\{}"; CMDRGX="${CMDRGX//\}/\\\}}"
#  #--- Skip any commands that we've deemed to be "scripted".
#  [[ "${IN_SCRIPT}" == "IN" ]] && {
#    return
#  #--- Skip any commands that exist in PROMPT_COMMAND
#  # WARNING: Bear in mind that manually-entered commands that match are also ignored.
#  } || [[ ! "${PROMPT_COMMAND}" =~ ${CMDRGX} ]] && { 
#    #--- If BCMD is trying to set the terminal title, we don't do anything.
#    [[ ! "${BCMD}" =~ \\e\]0\; ]] && {
#      local OUT=
#      #--- Make the title more noticable, if running with root privileges.
#      [[ ${EUID} == 0 ]] && OUT+="(ROOT_USER) " || OUT+="${USER}@"
#      OUT+="${HOSTNAME}:"
#      OUT+="${PWD} "
#     OUT+="[${BCMD}]"
#      local R=
#      for ((E=0; E<${#UTB_TEXT_REPLACE[@]}; E+=2)); do
#        local R="${UTB_TEXT_REPLACE[$E]}"
#        local RGX="${R//\\/\\\\}"; RGX="${RGX//\//\\\/}"; RGX="${RGX//\$/\\\$}";
#        RGX="${RGX//\{/\\\{}"; RGX="${RGX//\}/\\\}}"
#        [[ "${OUT}" =~ ${RGX} ]] && {
#          OUT="${OUT//${RGX}/${UTB_TEXT_REPLACE[$((${E}+1))]}}"
#        }
#      done
#      echo -ne "\e]0;${OUT}\007"
#    }
#  }
#} # END _update_title_bar

##--- Some stuff needs to be initialized, for things to work correctly.
#update_title_bar init
###
